{"ast":null,"code":"import { embedResources } from './embed-resources';\nimport { toArray } from './util';\nimport { isDataUrl, resourceToDataURL } from './dataurl';\nimport { getMimeType } from './mimes';\n\nasync function embedBackground(clonedNode, options) {\n  var _a;\n\n  const background = (_a = clonedNode.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue('background');\n\n  if (background) {\n    const cssString = await embedResources(background, null, options);\n    clonedNode.style.setProperty('background', cssString, clonedNode.style.getPropertyPriority('background'));\n  }\n}\n\nasync function embedImageNode(clonedNode, options) {\n  if (!(clonedNode instanceof HTMLImageElement && !isDataUrl(clonedNode.src)) && !(clonedNode instanceof SVGImageElement && !isDataUrl(clonedNode.href.baseVal))) {\n    return;\n  }\n\n  const url = clonedNode instanceof HTMLImageElement ? clonedNode.src : clonedNode.href.baseVal;\n  const dataURL = await resourceToDataURL(url, getMimeType(url), options);\n  await new Promise((resolve, reject) => {\n    clonedNode.onload = resolve;\n    clonedNode.onerror = reject;\n    const image = clonedNode;\n\n    if (image.decode) {\n      image.decode = resolve;\n    }\n\n    if (clonedNode instanceof HTMLImageElement) {\n      clonedNode.srcset = '';\n      clonedNode.src = dataURL;\n    } else {\n      clonedNode.href.baseVal = dataURL;\n    }\n  });\n}\n\nasync function embedChildren(clonedNode, options) {\n  const children = toArray(clonedNode.childNodes);\n  const deferreds = children.map(child => embedImages(child, options));\n  await Promise.all(deferreds).then(() => clonedNode);\n}\n\nexport async function embedImages(clonedNode, options) {\n  if (clonedNode instanceof Element) {\n    await embedBackground(clonedNode, options);\n    await embedImageNode(clonedNode, options);\n    await embedChildren(clonedNode, options);\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,cAAT,QAA+B,mBAA/B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,WAA7C;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,eAAeC,eAAf,CACEC,UADF,EAEEC,OAFF,EAEkB;;;EAEhB,MAAMC,UAAU,GAAG,gBAAU,CAACC,KAAX,MAAgB,IAAhB,IAAgBC,aAAhB,GAAgB,MAAhB,GAAgBA,GAAEC,gBAAF,CAAmB,YAAnB,CAAnC;;EACA,IAAIH,UAAJ,EAAgB;IACd,MAAMI,SAAS,GAAG,MAAMZ,cAAc,CAACQ,UAAD,EAAa,IAAb,EAAmBD,OAAnB,CAAtC;IACAD,UAAU,CAACG,KAAX,CAAiBI,WAAjB,CACE,YADF,EAEED,SAFF,EAGEN,UAAU,CAACG,KAAX,CAAiBK,mBAAjB,CAAqC,YAArC,CAHF;EAKD;AACF;;AAED,eAAeC,cAAf,CACET,UADF,EAEEC,OAFF,EAEkB;EAEhB,IACE,EAAED,UAAU,YAAYU,gBAAtB,IAA0C,CAACd,SAAS,CAACI,UAAU,CAACW,GAAZ,CAAtD,KACA,EACEX,UAAU,YAAYY,eAAtB,IACA,CAAChB,SAAS,CAACI,UAAU,CAACa,IAAX,CAAgBC,OAAjB,CAFZ,CAFF,EAME;IACA;EACD;;EAED,MAAMC,GAAG,GACPf,UAAU,YAAYU,gBAAtB,GACIV,UAAU,CAACW,GADf,GAEIX,UAAU,CAACa,IAAX,CAAgBC,OAHtB;EAKA,MAAME,OAAO,GAAG,MAAMnB,iBAAiB,CAACkB,GAAD,EAAMjB,WAAW,CAACiB,GAAD,CAAjB,EAAwBd,OAAxB,CAAvC;EACA,MAAM,IAAIgB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;IACpCnB,UAAU,CAACoB,MAAX,GAAoBF,OAApB;IACAlB,UAAU,CAACqB,OAAX,GAAqBF,MAArB;IAEA,MAAMG,KAAK,GAAGtB,UAAd;;IACA,IAAIsB,KAAK,CAACC,MAAV,EAAkB;MAChBD,KAAK,CAACC,MAAN,GAAeL,OAAf;IACD;;IAED,IAAIlB,UAAU,YAAYU,gBAA1B,EAA4C;MAC1CV,UAAU,CAACwB,MAAX,GAAoB,EAApB;MACAxB,UAAU,CAACW,GAAX,GAAiBK,OAAjB;IACD,CAHD,MAGO;MACLhB,UAAU,CAACa,IAAX,CAAgBC,OAAhB,GAA0BE,OAA1B;IACD;EACF,CAfK,CAAN;AAgBD;;AAED,eAAeS,aAAf,CACEzB,UADF,EAEEC,OAFF,EAEkB;EAEhB,MAAMyB,QAAQ,GAAG/B,OAAO,CAAcK,UAAU,CAAC2B,UAAzB,CAAxB;EACA,MAAMC,SAAS,GAAGF,QAAQ,CAACG,GAAT,CAAcC,KAAD,IAAWC,WAAW,CAACD,KAAD,EAAQ7B,OAAR,CAAnC,CAAlB;EACA,MAAMgB,OAAO,CAACe,GAAR,CAAYJ,SAAZ,EAAuBK,IAAvB,CAA4B,MAAMjC,UAAlC,CAAN;AACD;;AAED,OAAO,eAAe+B,WAAf,CACL/B,UADK,EAELC,OAFK,EAEW;EAEhB,IAAID,UAAU,YAAYkC,OAA1B,EAAmC;IACjC,MAAMnC,eAAe,CAACC,UAAD,EAAaC,OAAb,CAArB;IACA,MAAMQ,cAAc,CAACT,UAAD,EAAaC,OAAb,CAApB;IACA,MAAMwB,aAAa,CAACzB,UAAD,EAAaC,OAAb,CAAnB;EACD;AACF","names":["embedResources","toArray","isDataUrl","resourceToDataURL","getMimeType","embedBackground","clonedNode","options","background","style","_a","getPropertyValue","cssString","setProperty","getPropertyPriority","embedImageNode","HTMLImageElement","src","SVGImageElement","href","baseVal","url","dataURL","Promise","resolve","reject","onload","onerror","image","decode","srcset","embedChildren","children","childNodes","deferreds","map","child","embedImages","all","then","Element"],"sources":["../src/embed-images.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}