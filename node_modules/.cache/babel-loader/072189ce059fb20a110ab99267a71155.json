{"ast":null,"code":"import { resolveUrl } from './util';\nimport { getMimeType } from './mimes';\nimport { isDataUrl, makeDataUrl, resourceToDataURL } from './dataurl';\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nconst URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"']?)([^\"']+)\\1\\)/g;\nconst FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\n\nfunction toRegex(url) {\n  // eslint-disable-next-line no-useless-escape\n  const escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n  return new RegExp(`(url\\\\(['\"]?)(${escaped})(['\"]?\\\\))`, 'g');\n}\n\nexport function parseURLs(cssText) {\n  const urls = [];\n  cssText.replace(URL_REGEX, (raw, quotation, url) => {\n    urls.push(url);\n    return raw;\n  });\n  return urls.filter(url => !isDataUrl(url));\n}\nexport async function embed(cssText, resourceURL, baseURL, options, getContentFromUrl) {\n  try {\n    const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n    const contentType = getMimeType(resourceURL);\n    let dataURL;\n\n    if (getContentFromUrl) {\n      const content = await getContentFromUrl(resolvedURL);\n      dataURL = makeDataUrl(content, contentType);\n    } else {\n      dataURL = await resourceToDataURL(resolvedURL, contentType, options);\n    }\n\n    return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`);\n  } catch (error) {// pass\n  }\n\n  return cssText;\n}\n\nfunction filterPreferredFontFormat(str, _ref) {\n  let {\n    preferredFontFormat\n  } = _ref;\n  return !preferredFontFormat ? str : str.replace(FONT_SRC_REGEX, match => {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const [src,, format] = URL_WITH_FORMAT_REGEX.exec(match) || [];\n\n      if (!format) {\n        return '';\n      }\n\n      if (format === preferredFontFormat) {\n        return `src: ${src};`;\n      }\n    }\n  });\n}\n\nexport function shouldEmbed(url) {\n  return url.search(URL_REGEX) !== -1;\n}\nexport async function embedResources(cssText, baseUrl, options) {\n  if (!shouldEmbed(cssText)) {\n    return cssText;\n  }\n\n  const filteredCSSText = filterPreferredFontFormat(cssText, options);\n  const urls = parseURLs(filteredCSSText);\n  return urls.reduce((deferred, url) => deferred.then(css => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText));\n}","map":{"version":3,"mappings":"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","names":["resolveUrl","getMimeType","isDataUrl","makeDataUrl","resourceToDataURL","URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","toRegex","url","escaped","replace","RegExp","parseURLs","cssText","urls","raw","quotation","push","filter","embed","resourceURL","baseURL","options","getContentFromUrl","resolvedURL","contentType","dataURL","content","error","filterPreferredFontFormat","str","preferredFontFormat","match","src","format","exec","shouldEmbed","search","embedResources","baseUrl","filteredCSSText","reduce","deferred","then","css","Promise","resolve"],"sources":["../src/embed-resources.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}