{"ast":null,"code":"import { cloneNode } from './clone-node';\nimport { embedImages } from './embed-images';\nimport { applyStyle } from './apply-style';\nimport { embedWebFonts, getWebFontCSS } from './embed-webfonts';\nimport { getImageSize, getPixelRatio, createImage, canvasToBlob, nodeToDataURL, checkCanvasDimensions } from './util';\nexport async function toSvg(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    width,\n    height\n  } = getImageSize(node, options);\n  const clonedNode = await cloneNode(node, options, true);\n  await embedWebFonts(clonedNode, options);\n  await embedImages(clonedNode, options);\n  applyStyle(clonedNode, options);\n  const datauri = await nodeToDataURL(clonedNode, width, height);\n  return datauri;\n}\nexport async function toCanvas(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    width,\n    height\n  } = getImageSize(node, options);\n  const svg = await toSvg(node, options);\n  const img = await createImage(svg);\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  const ratio = options.pixelRatio || getPixelRatio();\n  const canvasWidth = options.canvasWidth || width;\n  const canvasHeight = options.canvasHeight || height;\n  canvas.width = canvasWidth * ratio;\n  canvas.height = canvasHeight * ratio;\n\n  if (!options.skipAutoScale) {\n    checkCanvasDimensions(canvas);\n  }\n\n  canvas.style.width = `${canvasWidth}`;\n  canvas.style.height = `${canvasHeight}`;\n\n  if (options.backgroundColor) {\n    context.fillStyle = options.backgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  }\n\n  context.drawImage(img, 0, 0, canvas.width, canvas.height);\n  return canvas;\n}\nexport async function toPixelData(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    width,\n    height\n  } = getImageSize(node, options);\n  const canvas = await toCanvas(node, options);\n  const ctx = canvas.getContext('2d');\n  return ctx.getImageData(0, 0, width, height).data;\n}\nexport async function toPng(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const canvas = await toCanvas(node, options);\n  return canvas.toDataURL();\n}\nexport async function toJpeg(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const canvas = await toCanvas(node, options);\n  return canvas.toDataURL('image/jpeg', options.quality || 1);\n}\nexport async function toBlob(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const canvas = await toCanvas(node, options);\n  const blob = await canvasToBlob(canvas);\n  return blob;\n}\nexport async function getFontEmbedCSS(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return getWebFontCSS(node, options);\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kBAA7C;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,aALF,EAMEC,qBANF,QAOO,QAPP;AASA,OAAO,eAAeC,KAAf,CACLC,IADK,EAEgB;EAAA,IAArBC,OAAqB,uEAAF,EAAE;EAErB,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAoBV,YAAY,CAACO,IAAD,EAAOC,OAAP,CAAtC;EACA,MAAMG,UAAU,GAAI,MAAMhB,SAAS,CAACY,IAAD,EAAOC,OAAP,EAAgB,IAAhB,CAAnC;EACA,MAAMV,aAAa,CAACa,UAAD,EAAaH,OAAb,CAAnB;EACA,MAAMZ,WAAW,CAACe,UAAD,EAAaH,OAAb,CAAjB;EACAX,UAAU,CAACc,UAAD,EAAaH,OAAb,CAAV;EACA,MAAMI,OAAO,GAAG,MAAMR,aAAa,CAACO,UAAD,EAAaF,KAAb,EAAoBC,MAApB,CAAnC;EACA,OAAOE,OAAP;AACD;AAED,OAAO,eAAeC,QAAf,CACLN,IADK,EAEgB;EAAA,IAArBC,OAAqB,uEAAF,EAAE;EAErB,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAoBV,YAAY,CAACO,IAAD,EAAOC,OAAP,CAAtC;EACA,MAAMM,GAAG,GAAG,MAAMR,KAAK,CAACC,IAAD,EAAOC,OAAP,CAAvB;EACA,MAAMO,GAAG,GAAG,MAAMb,WAAW,CAACY,GAAD,CAA7B;EAEA,MAAME,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;EACA,MAAMC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB;EACA,MAAMC,KAAK,GAAGb,OAAO,CAACc,UAAR,IAAsBrB,aAAa,EAAjD;EACA,MAAMsB,WAAW,GAAGf,OAAO,CAACe,WAAR,IAAuBd,KAA3C;EACA,MAAMe,YAAY,GAAGhB,OAAO,CAACgB,YAAR,IAAwBd,MAA7C;EAEAM,MAAM,CAACP,KAAP,GAAec,WAAW,GAAGF,KAA7B;EACAL,MAAM,CAACN,MAAP,GAAgBc,YAAY,GAAGH,KAA/B;;EAEA,IAAI,CAACb,OAAO,CAACiB,aAAb,EAA4B;IAC1BpB,qBAAqB,CAACW,MAAD,CAArB;EACD;;EACDA,MAAM,CAACU,KAAP,CAAajB,KAAb,GAAqB,GAAGc,WAAW,EAAnC;EACAP,MAAM,CAACU,KAAP,CAAahB,MAAb,GAAsB,GAAGc,YAAY,EAArC;;EAEA,IAAIhB,OAAO,CAACmB,eAAZ,EAA6B;IAC3BR,OAAO,CAACS,SAAR,GAAoBpB,OAAO,CAACmB,eAA5B;IACAR,OAAO,CAACU,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBb,MAAM,CAACP,KAA9B,EAAqCO,MAAM,CAACN,MAA5C;EACD;;EAEDS,OAAO,CAACW,SAAR,CAAkBf,GAAlB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6BC,MAAM,CAACP,KAApC,EAA2CO,MAAM,CAACN,MAAlD;EAEA,OAAOM,MAAP;AACD;AAED,OAAO,eAAee,WAAf,CACLxB,IADK,EAEgB;EAAA,IAArBC,OAAqB,uEAAF,EAAE;EAErB,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAoBV,YAAY,CAACO,IAAD,EAAOC,OAAP,CAAtC;EACA,MAAMQ,MAAM,GAAG,MAAMH,QAAQ,CAACN,IAAD,EAAOC,OAAP,CAA7B;EACA,MAAMwB,GAAG,GAAGhB,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;EACA,OAAOY,GAAG,CAACC,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBxB,KAAvB,EAA8BC,MAA9B,EAAsCwB,IAA7C;AACD;AAED,OAAO,eAAeC,KAAf,CACL5B,IADK,EAEgB;EAAA,IAArBC,OAAqB,uEAAF,EAAE;EAErB,MAAMQ,MAAM,GAAG,MAAMH,QAAQ,CAACN,IAAD,EAAOC,OAAP,CAA7B;EACA,OAAOQ,MAAM,CAACoB,SAAP,EAAP;AACD;AAED,OAAO,eAAeC,MAAf,CACL9B,IADK,EAEgB;EAAA,IAArBC,OAAqB,uEAAF,EAAE;EAErB,MAAMQ,MAAM,GAAG,MAAMH,QAAQ,CAACN,IAAD,EAAOC,OAAP,CAA7B;EACA,OAAOQ,MAAM,CAACoB,SAAP,CAAiB,YAAjB,EAA+B5B,OAAO,CAAC8B,OAAR,IAAmB,CAAlD,CAAP;AACD;AAED,OAAO,eAAeC,MAAf,CACLhC,IADK,EAEgB;EAAA,IAArBC,OAAqB,uEAAF,EAAE;EAErB,MAAMQ,MAAM,GAAG,MAAMH,QAAQ,CAACN,IAAD,EAAOC,OAAP,CAA7B;EACA,MAAMgC,IAAI,GAAG,MAAMrC,YAAY,CAACa,MAAD,CAA/B;EACA,OAAOwB,IAAP;AACD;AAED,OAAO,eAAeC,eAAf,CACLlC,IADK,EAEgB;EAAA,IAArBC,OAAqB,uEAAF,EAAE;EAErB,OAAOT,aAAa,CAACQ,IAAD,EAAOC,OAAP,CAApB;AACD","names":["cloneNode","embedImages","applyStyle","embedWebFonts","getWebFontCSS","getImageSize","getPixelRatio","createImage","canvasToBlob","nodeToDataURL","checkCanvasDimensions","toSvg","node","options","width","height","clonedNode","datauri","toCanvas","svg","img","canvas","document","createElement","context","getContext","ratio","pixelRatio","canvasWidth","canvasHeight","skipAutoScale","style","backgroundColor","fillStyle","fillRect","drawImage","toPixelData","ctx","getImageData","data","toPng","toDataURL","toJpeg","quality","toBlob","blob","getFontEmbedCSS"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}